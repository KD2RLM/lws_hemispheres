#!/usr/bin/env python
import os
import shutil
import datetime
import glob

import numpy as np
import pandas as pd
from sklearn.metrics import r2_score

import plot_r2

import matplotlib as mpl
from matplotlib import pyplot as plt

mpl.rcParams['font.size']      = 12
mpl.rcParams['font.weight']    = 'bold'
mpl.rcParams['axes.grid']      = True
mpl.rcParams['grid.linestyle'] = ':'
mpl.rcParams['figure.figsize'] = np.array([15, 8])
mpl.rcParams['axes.xmargin']   = 0
mpl.rcParams['axes.titleweight']    = 'bold'
mpl.rcParams['axes.labelweight']    = 'bold'

def list_seasons(yr_0=2010,yr_1=2022):
    """
    Give a list of the string codes for the default seasons to be analyzed.

    Season codes are in the form of '20101101_20110501'
    """
    yr = yr_0
    seasons = []
    while yr < yr_1:
        dt_0 = datetime.datetime(yr,11,1)
        dt_1 = datetime.datetime(yr+1,5,1)

        dt_0_str    = dt_0.strftime('%Y%m%d')
        dt_1_str    = dt_1.strftime('%Y%m%d')
        season      = '{!s}_{!s}'.format(dt_0_str,dt_1_str)
        seasons.append(season)
        yr += 1

    return seasons

def season_to_datetime(season):
    str_0, str_1 = season.split('_')
    sDate   = datetime.datetime.strptime(str_0,'%Y%m%d')
    eDate   = datetime.datetime.strptime(str_1,'%Y%m%d')
    return (sDate,eDate)

output_dir  = os.path.join('output','correlate_mstid_pv')
if os.path.exists(output_dir):
    shutil.rmtree(output_dir)
os.makedirs(output_dir)


def load_pvIndex( pvInx_csv   = 'output/merra2_geopotential/merra2_pvIndex.csv'):
    # Load in Polar Vortex Index.
    # This CSV is generated by merra2_geopotential.py
    df_pv       = pd.read_csv(pvInx_csv,parse_dates=[0],comment='#',index_col=0)
    return df_pv

def load_mstidIndex():
    # Load in MSTID Index.
    mstid_dir   = os.path.join('output','meanSubIntSpect_by_rtiCnt')
    pattern     = '*_reducedIndex.csv'
    mstid_fls   = glob.glob(os.path.join(mstid_dir,pattern))
    mstid_fls.sort()

    dfs_mstid   = []
    for mstid_fl in mstid_fls:
        dft = pd.read_csv(mstid_fl,parse_dates=[0],comment='#',index_col=0)
        dfs_mstid.append(dft)

    df_mstid    = pd.concat(dfs_mstid)
    
    return df_mstid

def join_dfs(df_pv,df_mstid,delay_pv_days=0):
    # Join Data Frames and drop NaN rows.
    # Allow the polar vortex dataframe to be delayed by a specifed number of days

    df_pv       = df_pv.copy()
    df_mstid    = df_mstid.copy()

    if delay_pv_days != 0:
        delay   = datetime.timedelta(days=delay_pv_days)
        df_pv.index = df_pv.index + delay

    df          = df_pv.join(df_mstid).dropna()
    return df

df_pv       = load_pvIndex()
df_mstid    = load_mstidIndex()

var_0       = 'merra2_pvIndex'
var_1       = 'smoothed'

pv_delays   = range(0,21)
#pv_delays   = [0,15]

seasons     = list_seasons()
seasons.append('all')

nans        = np.zeros((len(seasons),len(pv_delays)),dtype=float)
df_r2       = pd.DataFrame(nans.copy(),index=seasons,columns=pv_delays)
df_m        = pd.DataFrame(nans.copy(),index=seasons,columns=pv_delays)

for season in seasons:
    for pv_delay in pv_delays:
        df  = join_dfs(df_pv,df_mstid,delay_pv_days=pv_delay)

        if season == 'all':
            dft = df
        else:
            dt_0, dt_1  = season_to_datetime(season)
            tf          = np.logical_and(df.index >= dt_0, df.index < dt_1)
            dft         = df[tf].copy()

        #### SCATTER PLOT
        fig     = plt.figure(figsize=(8,8))
        ax      = fig.add_subplot(111)
        xx      = dft[var_0].values
        yy      = dft[var_1].values
        ax.scatter(xx,yy)

        model   = np.polyfit(xx,yy,1)
        predict = np.poly1d(model)
        yy_fit  = predict(xx)
        r2      = r2_score(yy,yy_fit)
        df_r2.loc[season,pv_delay] = r2
        df_m.loc[season,pv_delay]  = model[0]

        lbl = []
        lbl.append('y = {:0.3f}x + {:0.3f}'.format(*model))
        lbl.append('$r^2$ = {:0.3f}'.format(r2))
        label   = '\n'.join(lbl)
        ax.plot(xx,yy_fit,color='red',lw=2,label=label)

        ax.set_xlabel('MERRA2 Polar Vortext Index')
        ax.set_ylabel('SuperDARN MSTID Index ({!s})'.format(var_1))

        title   = []
        if season != 'all':
            txt = '{!s} - {!s} Northern Hemisphere Winter'.format(dt_0.strftime('%Y'),dt_1.strftime('%Y'))
        else:
            txt = 'All Northern Hemisphere Winters ({!s} - {!s})'.format(min(dft.index).strftime('%Y'),int(max(dft.index).strftime('%Y'))-1)
        title.append(txt)
        title.append('{!s} Day Polar Vortex Index Delay'.format(pv_delay))
        ax.set_title('\n'.join(title))

        ax.legend(loc='lower right')

        fig.tight_layout()
        scat_out    = os.path.join(output_dir,season,'scatter')
        if not os.path.exists(scat_out): os.makedirs(scat_out)
        png_fname   = '{!s}_SCATTER_{!s}_{!s}_{:03d}dayPVdelay.png'.format(season,var_0,var_1,pv_delay)
        png_path    = os.path.join(scat_out,png_fname)
        fig.savefig(png_path,bbox_inches='tight')

        scat_out    = os.path.join(output_dir,'scatter','{:03d}'.format(pv_delay))
        if not os.path.exists(scat_out): os.makedirs(scat_out)
        png_fname   = '{!s}_SCATTER_{!s}_{!s}_{:03d}dayPVdelay.png'.format(season,var_0,var_1,pv_delay)
        png_path    = os.path.join(scat_out,png_fname)
        fig.savefig(png_path,bbox_inches='tight')

        plt.close(fig)
        print('SAVING: {!s}'.format(png_path))

        #### STACK PLOT
        if season == 'all': continue
        fig     = plt.figure(figsize=(15,8))
        ax      = fig.add_subplot(2,1,1)

        ## MSTID Index
        handles = []
        xx      = dft.index
        yy      = dft['reduced_index']
        label   = 'Raw'
        hndl    = ax.plot(xx,yy,label=label)
        handles.append(hndl[0])

        xx      = dft.index
        yy      = dft['smoothed']
        label   = 'Smoothed'
        hndl    = ax.plot(xx,yy,lw=3,label=label)
        handles.append(hndl[0])

        ax1     = ax.twinx()
        xx      = dft.index
        yy      = dft['n_good_df']
        label   = 'n Data Points'
        hndl    = ax1.plot(xx,yy,color='0.8',ls='--',label=label)
        ax1.set_ylabel('n Data Points\n(Dashed Line)')
        handles.append(hndl[0])

        ax.legend(handles=handles,loc='lower left',ncols=3)
        ax.set_ylabel('SuperDARN Reduced\nMSTID Index',fontdict={'weight':'bold'})
        ax.set_title('SuperDARN Reduced MSTID Index',loc='left',fontdict={'weight':'bold'})
        ax.set_xlim(dt_0,dt_1)

        ## Polar Vortex Index
        ax      = fig.add_subplot(2,1,2)
        xx      = dft.index
        yy      = dft[var_0]
        hndl    = ax.plot(xx,yy)
        ax.set_ylabel('Polar Vortex Index $\zeta$',fontdict={'weight':'bold'})
        ax.set_title('MERRA2 Frissell et al. 2016 Polar Vortex Index (Delayed {!s} Days)'.format(pv_delay),loc='left',fontdict={'weight':'bold'})
        ax.set_xlim(dt_0,dt_1)

        fig.text(0.5,1,season,fontdict={'weight':'bold','fontsize':24},ha='center')

        fig.tight_layout()
        stack_out    = os.path.join(output_dir,season,'stackplots')
        if not os.path.exists(stack_out): os.makedirs(stack_out)
        png_fname   = '{!s}_STACK_{!s}_{!s}_{:03d}dayPVdelay.png'.format(season,var_0,var_1,pv_delay)
        png_path    = os.path.join(stack_out,png_fname)
        fig.savefig(png_path,bbox_inches='tight')


        stack_out    = os.path.join(output_dir,'stackplots','{:03d}'.format(pv_delay))
        if not os.path.exists(stack_out): os.makedirs(stack_out)
        png_fname   = '{!s}_STACK_{!s}_{!s}_{:03d}dayPVdelay.png'.format(season,var_0,var_1,pv_delay)
        png_path    = os.path.join(stack_out,png_fname)
        fig.savefig(png_path,bbox_inches='tight')

        plt.close(fig)
        print('SAVING: {!s}'.format(png_path))

csv_path = os.path.join(output_dir,'df_r2.csv')
df_r2.to_csv(csv_path)
plot_r2.plot_r2_csv(csv_path)

csv_path = os.path.join(output_dir,'df_m_slope.csv')
df_m.to_csv(csv_path)
plot_r2.plot_r2_csv(csv_path)

import ipdb; ipdb.set_trace()
