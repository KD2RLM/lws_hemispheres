#!/usr/bin/env python
import os
import shutil
import datetime
import glob

import numpy as np
import pandas as pd
from sklearn.metrics import r2_score


import matplotlib as mpl
from matplotlib import pyplot as plt

mpl.rcParams['font.size']      = 12
mpl.rcParams['font.weight']    = 'bold'
mpl.rcParams['axes.grid']      = True
mpl.rcParams['grid.linestyle'] = ':'
mpl.rcParams['figure.figsize'] = np.array([15, 8])
mpl.rcParams['axes.xmargin']   = 0

def list_seasons(yr_0=2010,yr_1=2022):
    """
    Give a list of the string codes for the default seasons to be analyzed.

    Season codes are in the form of '20101101_20110501'
    """
    yr = yr_0
    seasons = []
    while yr < yr_1:
        dt_0 = datetime.datetime(yr,11,1)
        dt_1 = datetime.datetime(yr+1,5,1)

        dt_0_str    = dt_0.strftime('%Y%m%d')
        dt_1_str    = dt_1.strftime('%Y%m%d')
        season      = '{!s}_{!s}'.format(dt_0_str,dt_1_str)
        seasons.append(season)
        yr += 1

    return seasons

def season_to_datetime(season):
    str_0, str_1 = season.split('_')
    sDate   = datetime.datetime.strptime(str_0,'%Y%m%d')
    eDate   = datetime.datetime.strptime(str_1,'%Y%m%d')
    return (sDate,eDate)

output_dir  = os.path.join('output','correlate_mstid_pv')
if os.path.exists(output_dir):
    shutil.rmtree(output_dir)
os.makedirs(output_dir)

# Load in Polar Vortex Index.
# This CSV is generated by merra2_geopotential.py
pvInx_csv   = 'output/merra2_geopotential/merra2_pvIndex.csv'
df_pv       = pd.read_csv(pvInx_csv,parse_dates=[0],comment='#',index_col=0)

# Load in MSTID Index.
mstid_dir   = os.path.join('output','meanSubIntSpect_by_rtiCnt')
pattern     = '*_reducedIndex.csv'
mstid_fls   = glob.glob(os.path.join(mstid_dir,pattern))
mstid_fls.sort()

mstid_dfs   = []
for mstid_fl in mstid_fls:
    dft = pd.read_csv(mstid_fl,parse_dates=[0],comment='#',index_col=0)
    mstid_dfs.append(dft)

mstid_df    = pd.concat(mstid_dfs)

# Join Data Frames and drop NaN rows.
df          = df_pv.join(mstid_df).dropna()

var_0       = 'merra2_pvIndex'
var_1       = 'smoothed'

seasons     = list_seasons()
seasons.append('all')
for season in seasons:

    if season == 'all':
        dft = df
    else:
        dt_0, dt_1  = season_to_datetime(season)
        tf          = np.logical_and(df.index >= dt_0, df.index < dt_1)
        dft         = df[tf].copy()

    #### SCATTER PLOT
    fig     = plt.figure(figsize=(8,8))
    ax      = fig.add_subplot(111)
    xx      = dft[var_0].values
    yy      = dft[var_1].values
    ax.scatter(xx,yy)

    model   = np.polyfit(xx,yy,1)
    predict = np.poly1d(model)
    yy_fit  = predict(xx)
    r2      = r2_score(yy,yy_fit)

    label   = '$r^2$ = {:0.3f}'.format(r2)
    ax.plot(xx,yy_fit,color='red',lw=2,label=label)

    ax.set_xlabel(var_0)
    ax.set_ylabel('SuperDARN MSTID Index ({!s})'.format(var_1))
    ax.set_title(season)

    ax.legend(loc='lower right')

    fig.tight_layout()
    png_fname   = '{!s}_SCATTER_{!s}_{!s}.png'.format(season,var_0,var_1)
    png_path    = os.path.join(output_dir,png_fname)
    fig.savefig(png_path,bbox_inches='tight')
    print('SAVING: {!s}'.format(png_path))

import ipdb; ipdb.set_trace()
